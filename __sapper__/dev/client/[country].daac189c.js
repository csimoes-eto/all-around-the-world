import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, v as validate_slots, L as onMount, e as element, t as text, a as space, c as claim_element, b as children, h as claim_text, f as detach_dev, g as claim_space, j as attr_dev, k as add_location, l as insert_dev, m as append_dev, F as validate_each_argument, J as empty, K as destroy_each, n as set_data_dev, o as noop, M as globals, G as assign, z as create_component, w as query_selector_all, A as claim_component, B as mount_component, H as get_spread_update, I as get_spread_object, x as transition_in, y as transition_out, E as destroy_component } from './client.61127fe5.js';
import { b as browser } from './browser.100d9776.js';

/* src\components\CountryInfo.svelte generated by Svelte v3.23.2 */
const file = "src\\components\\CountryInfo.svelte";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[13] = list[i];
	return child_ctx;
}

// (185:4) {#if borders.length > 0}
function create_if_block(ctx) {
	let div1;
	let p;
	let span;
	let t0;
	let t1;
	let div0;
	let if_block = /*borders*/ ctx[8].length > 0 && create_if_block_1(ctx);

	const block = {
		c: function create() {
			div1 = element("div");
			p = element("p");
			span = element("span");
			t0 = text("Border Countries:");
			t1 = space();
			div0 = element("div");
			if (if_block) if_block.c();
			this.h();
		},
		l: function claim(nodes) {
			div1 = claim_element(nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			p = claim_element(div1_nodes, "P", { class: true });
			var p_nodes = children(p);
			span = claim_element(p_nodes, "SPAN", { class: true });
			var span_nodes = children(span);
			t0 = claim_text(span_nodes, "Border Countries:");
			span_nodes.forEach(detach_dev);
			p_nodes.forEach(detach_dev);
			t1 = claim_space(div1_nodes);
			div0 = claim_element(div1_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			if (if_block) if_block.l(div0_nodes);
			div0_nodes.forEach(detach_dev);
			div1_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(span, "class", "svelte-1v4um5a");
			add_location(span, file, 187, 10, 3833);
			attr_dev(p, "class", "svelte-1v4um5a");
			add_location(p, file, 186, 8, 3818);
			attr_dev(div0, "class", "bordering-countries-outter");
			add_location(div0, file, 189, 8, 3887);
			attr_dev(div1, "class", "country-info-borders svelte-1v4um5a");
			add_location(div1, file, 185, 6, 3774);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div1, anchor);
			append_dev(div1, p);
			append_dev(p, span);
			append_dev(span, t0);
			append_dev(div1, t1);
			append_dev(div1, div0);
			if (if_block) if_block.m(div0, null);
		},
		p: function update(ctx, dirty) {
			if (/*borders*/ ctx[8].length > 0) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block_1(ctx);
					if_block.c();
					if_block.m(div0, null);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div1);
			if (if_block) if_block.d();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(185:4) {#if borders.length > 0}",
		ctx
	});

	return block;
}

// (191:10) {#if borders.length > 0}
function create_if_block_1(ctx) {
	let each_1_anchor;
	let each_value = /*borders*/ ctx[8];
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const block = {
		c: function create() {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
		},
		l: function claim(nodes) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(nodes);
			}

			each_1_anchor = empty();
		},
		m: function mount(target, anchor) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert_dev(target, each_1_anchor, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*borders*/ 256) {
				each_value = /*borders*/ ctx[8];
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		d: function destroy(detaching) {
			destroy_each(each_blocks, detaching);
			if (detaching) detach_dev(each_1_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1.name,
		type: "if",
		source: "(191:10) {#if borders.length > 0}",
		ctx
	});

	return block;
}

// (192:12) {#each borders as borderingCountry}
function create_each_block(ctx) {
	let div;
	let a;
	let button;
	let t0_value = /*borderingCountry*/ ctx[13] + "";
	let t0;
	let a_href_value;
	let t1;

	const block = {
		c: function create() {
			div = element("div");
			a = element("a");
			button = element("button");
			t0 = text(t0_value);
			t1 = space();
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			a = claim_element(div_nodes, "A", { href: true, rel: true });
			var a_nodes = children(a);
			button = claim_element(a_nodes, "BUTTON", { class: true });
			var button_nodes = children(button);
			t0 = claim_text(button_nodes, t0_value);
			button_nodes.forEach(detach_dev);
			a_nodes.forEach(detach_dev);
			t1 = claim_space(div_nodes);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(button, "class", "svelte-1v4um5a");
			add_location(button, file, 194, 18, 4147);
			attr_dev(a, "href", a_href_value = /*borderingCountry*/ ctx[13]);
			attr_dev(a, "rel", "prefetch");
			add_location(a, file, 193, 16, 4085);
			attr_dev(div, "class", "bordering-countries-inner");
			add_location(div, file, 192, 14, 4028);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, a);
			append_dev(a, button);
			append_dev(button, t0);
			append_dev(div, t1);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*borders*/ 256 && t0_value !== (t0_value = /*borderingCountry*/ ctx[13] + "")) set_data_dev(t0, t0_value);

			if (dirty & /*borders*/ 256 && a_href_value !== (a_href_value = /*borderingCountry*/ ctx[13])) {
				attr_dev(a, "href", a_href_value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block.name,
		type: "each",
		source: "(192:12) {#each borders as borderingCountry}",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let div5;
	let div0;
	let img;
	let img_src_value;
	let img_alt_value;
	let t0;
	let div4;
	let div1;
	let h2;
	let t1;
	let t2;
	let div2;
	let p0;
	let span0;
	let t3;
	let t4;
	let t5;
	let t6;
	let p1;
	let span1;
	let t7;
	let t8;
	let t9_value = numberWithCommas(/*population*/ ctx[3]) + "";
	let t9;
	let t10;
	let p2;
	let span2;
	let t11;
	let t12;
	let t13;
	let t14;
	let p3;
	let span3;
	let t15;
	let t16;
	let t17;
	let t18;
	let p4;
	let span4;
	let t19;
	let t20;
	let t21;
	let t22;
	let div3;
	let p5;
	let span5;
	let t23;
	let t24;
	let t25;
	let t26;
	let p6;
	let span6;
	let t27;
	let t28;
	let t29_value = /*displayCurrencies*/ ctx[9].join(", ") + "";
	let t29;
	let t30;
	let p7;
	let span7;
	let t31;
	let t32;
	let t33_value = /*displayLanguages*/ ctx[10].join(", ") + "";
	let t33;
	let t34;
	let if_block = /*borders*/ ctx[8].length > 0 && create_if_block(ctx);

	const block = {
		c: function create() {
			div5 = element("div");
			div0 = element("div");
			img = element("img");
			t0 = space();
			div4 = element("div");
			div1 = element("div");
			h2 = element("h2");
			t1 = text(/*name*/ ctx[1]);
			t2 = space();
			div2 = element("div");
			p0 = element("p");
			span0 = element("span");
			t3 = text("Native Name:");
			t4 = space();
			t5 = text(/*nativeName*/ ctx[2]);
			t6 = space();
			p1 = element("p");
			span1 = element("span");
			t7 = text("Population:");
			t8 = space();
			t9 = text(t9_value);
			t10 = space();
			p2 = element("p");
			span2 = element("span");
			t11 = text("Region:");
			t12 = space();
			t13 = text(/*region*/ ctx[4]);
			t14 = space();
			p3 = element("p");
			span3 = element("span");
			t15 = text("Sub Region:");
			t16 = space();
			t17 = text(/*subregion*/ ctx[5]);
			t18 = space();
			p4 = element("p");
			span4 = element("span");
			t19 = text("Capital:");
			t20 = space();
			t21 = text(/*capital*/ ctx[6]);
			t22 = space();
			div3 = element("div");
			p5 = element("p");
			span5 = element("span");
			t23 = text("Top Level Domain:");
			t24 = space();
			t25 = text(/*topLevelDomain*/ ctx[7]);
			t26 = space();
			p6 = element("p");
			span6 = element("span");
			t27 = text("Currencies:");
			t28 = space();
			t29 = text(t29_value);
			t30 = space();
			p7 = element("p");
			span7 = element("span");
			t31 = text("Languages:");
			t32 = space();
			t33 = text(t33_value);
			t34 = space();
			if (if_block) if_block.c();
			this.h();
		},
		l: function claim(nodes) {
			div5 = claim_element(nodes, "DIV", { class: true });
			var div5_nodes = children(div5);
			div0 = claim_element(div5_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			img = claim_element(div0_nodes, "IMG", { src: true, alt: true, class: true });
			div0_nodes.forEach(detach_dev);
			t0 = claim_space(div5_nodes);
			div4 = claim_element(div5_nodes, "DIV", { class: true });
			var div4_nodes = children(div4);
			div1 = claim_element(div4_nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			h2 = claim_element(div1_nodes, "H2", { class: true });
			var h2_nodes = children(h2);
			t1 = claim_text(h2_nodes, /*name*/ ctx[1]);
			h2_nodes.forEach(detach_dev);
			div1_nodes.forEach(detach_dev);
			t2 = claim_space(div4_nodes);
			div2 = claim_element(div4_nodes, "DIV", { class: true });
			var div2_nodes = children(div2);
			p0 = claim_element(div2_nodes, "P", { class: true });
			var p0_nodes = children(p0);
			span0 = claim_element(p0_nodes, "SPAN", { class: true });
			var span0_nodes = children(span0);
			t3 = claim_text(span0_nodes, "Native Name:");
			span0_nodes.forEach(detach_dev);
			t4 = claim_space(p0_nodes);
			t5 = claim_text(p0_nodes, /*nativeName*/ ctx[2]);
			p0_nodes.forEach(detach_dev);
			t6 = claim_space(div2_nodes);
			p1 = claim_element(div2_nodes, "P", { class: true });
			var p1_nodes = children(p1);
			span1 = claim_element(p1_nodes, "SPAN", { class: true });
			var span1_nodes = children(span1);
			t7 = claim_text(span1_nodes, "Population:");
			span1_nodes.forEach(detach_dev);
			t8 = claim_space(p1_nodes);
			t9 = claim_text(p1_nodes, t9_value);
			p1_nodes.forEach(detach_dev);
			t10 = claim_space(div2_nodes);
			p2 = claim_element(div2_nodes, "P", { class: true });
			var p2_nodes = children(p2);
			span2 = claim_element(p2_nodes, "SPAN", { class: true });
			var span2_nodes = children(span2);
			t11 = claim_text(span2_nodes, "Region:");
			span2_nodes.forEach(detach_dev);
			t12 = claim_space(p2_nodes);
			t13 = claim_text(p2_nodes, /*region*/ ctx[4]);
			p2_nodes.forEach(detach_dev);
			t14 = claim_space(div2_nodes);
			p3 = claim_element(div2_nodes, "P", { class: true });
			var p3_nodes = children(p3);
			span3 = claim_element(p3_nodes, "SPAN", { class: true });
			var span3_nodes = children(span3);
			t15 = claim_text(span3_nodes, "Sub Region:");
			span3_nodes.forEach(detach_dev);
			t16 = claim_space(p3_nodes);
			t17 = claim_text(p3_nodes, /*subregion*/ ctx[5]);
			p3_nodes.forEach(detach_dev);
			t18 = claim_space(div2_nodes);
			p4 = claim_element(div2_nodes, "P", { class: true });
			var p4_nodes = children(p4);
			span4 = claim_element(p4_nodes, "SPAN", { class: true });
			var span4_nodes = children(span4);
			t19 = claim_text(span4_nodes, "Capital:");
			span4_nodes.forEach(detach_dev);
			t20 = claim_space(p4_nodes);
			t21 = claim_text(p4_nodes, /*capital*/ ctx[6]);
			p4_nodes.forEach(detach_dev);
			div2_nodes.forEach(detach_dev);
			t22 = claim_space(div4_nodes);
			div3 = claim_element(div4_nodes, "DIV", { class: true });
			var div3_nodes = children(div3);
			p5 = claim_element(div3_nodes, "P", { class: true });
			var p5_nodes = children(p5);
			span5 = claim_element(p5_nodes, "SPAN", { class: true });
			var span5_nodes = children(span5);
			t23 = claim_text(span5_nodes, "Top Level Domain:");
			span5_nodes.forEach(detach_dev);
			t24 = claim_space(p5_nodes);
			t25 = claim_text(p5_nodes, /*topLevelDomain*/ ctx[7]);
			p5_nodes.forEach(detach_dev);
			t26 = claim_space(div3_nodes);
			p6 = claim_element(div3_nodes, "P", { class: true });
			var p6_nodes = children(p6);
			span6 = claim_element(p6_nodes, "SPAN", { class: true });
			var span6_nodes = children(span6);
			t27 = claim_text(span6_nodes, "Currencies:");
			span6_nodes.forEach(detach_dev);
			t28 = claim_space(p6_nodes);
			t29 = claim_text(p6_nodes, t29_value);
			p6_nodes.forEach(detach_dev);
			t30 = claim_space(div3_nodes);
			p7 = claim_element(div3_nodes, "P", { class: true });
			var p7_nodes = children(p7);
			span7 = claim_element(p7_nodes, "SPAN", { class: true });
			var span7_nodes = children(span7);
			t31 = claim_text(span7_nodes, "Languages:");
			span7_nodes.forEach(detach_dev);
			t32 = claim_space(p7_nodes);
			t33 = claim_text(p7_nodes, t33_value);
			p7_nodes.forEach(detach_dev);
			div3_nodes.forEach(detach_dev);
			t34 = claim_space(div4_nodes);
			if (if_block) if_block.l(div4_nodes);
			div4_nodes.forEach(detach_dev);
			div5_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			if (img.src !== (img_src_value = /*flag*/ ctx[0])) attr_dev(img, "src", img_src_value);
			attr_dev(img, "alt", img_alt_value = "" + (/*name*/ ctx[1] + " flag"));
			attr_dev(img, "class", "svelte-1v4um5a");
			add_location(img, file, 141, 4, 2788);
			attr_dev(div0, "class", "flag-image svelte-1v4um5a");
			add_location(div0, file, 140, 2, 2758);
			attr_dev(h2, "class", "svelte-1v4um5a");
			add_location(h2, file, 146, 6, 2918);
			attr_dev(div1, "class", "country-info-name svelte-1v4um5a");
			add_location(div1, file, 145, 4, 2879);
			attr_dev(span0, "class", "svelte-1v4um5a");
			add_location(span0, file, 150, 8, 3009);
			attr_dev(p0, "class", "svelte-1v4um5a");
			add_location(p0, file, 149, 6, 2996);
			attr_dev(span1, "class", "svelte-1v4um5a");
			add_location(span1, file, 154, 8, 3089);
			attr_dev(p1, "class", "svelte-1v4um5a");
			add_location(p1, file, 153, 6, 3076);
			attr_dev(span2, "class", "svelte-1v4um5a");
			add_location(span2, file, 158, 8, 3186);
			attr_dev(p2, "class", "svelte-1v4um5a");
			add_location(p2, file, 157, 6, 3173);
			attr_dev(span3, "class", "svelte-1v4um5a");
			add_location(span3, file, 162, 8, 3257);
			attr_dev(p3, "class", "svelte-1v4um5a");
			add_location(p3, file, 161, 6, 3244);
			attr_dev(span4, "class", "svelte-1v4um5a");
			add_location(span4, file, 166, 8, 3335);
			attr_dev(p4, "class", "svelte-1v4um5a");
			add_location(p4, file, 165, 6, 3322);
			attr_dev(div2, "class", "country-info-inner-left svelte-1v4um5a");
			add_location(div2, file, 148, 4, 2951);
			attr_dev(span5, "class", "svelte-1v4um5a");
			add_location(span5, file, 172, 8, 3464);
			attr_dev(p5, "class", "svelte-1v4um5a");
			add_location(p5, file, 171, 6, 3451);
			attr_dev(span6, "class", "svelte-1v4um5a");
			add_location(span6, file, 176, 8, 3553);
			attr_dev(p6, "class", "svelte-1v4um5a");
			add_location(p6, file, 175, 6, 3540);
			attr_dev(span7, "class", "svelte-1v4um5a");
			add_location(span7, file, 180, 8, 3650);
			attr_dev(p7, "class", "svelte-1v4um5a");
			add_location(p7, file, 179, 6, 3637);
			attr_dev(div3, "class", "country-info-inner-right svelte-1v4um5a");
			add_location(div3, file, 170, 4, 3405);
			attr_dev(div4, "class", "country-info-outter svelte-1v4um5a");
			add_location(div4, file, 144, 2, 2840);
			attr_dev(div5, "class", "container svelte-1v4um5a");
			add_location(div5, file, 139, 0, 2731);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div5, anchor);
			append_dev(div5, div0);
			append_dev(div0, img);
			append_dev(div5, t0);
			append_dev(div5, div4);
			append_dev(div4, div1);
			append_dev(div1, h2);
			append_dev(h2, t1);
			append_dev(div4, t2);
			append_dev(div4, div2);
			append_dev(div2, p0);
			append_dev(p0, span0);
			append_dev(span0, t3);
			append_dev(p0, t4);
			append_dev(p0, t5);
			append_dev(div2, t6);
			append_dev(div2, p1);
			append_dev(p1, span1);
			append_dev(span1, t7);
			append_dev(p1, t8);
			append_dev(p1, t9);
			append_dev(div2, t10);
			append_dev(div2, p2);
			append_dev(p2, span2);
			append_dev(span2, t11);
			append_dev(p2, t12);
			append_dev(p2, t13);
			append_dev(div2, t14);
			append_dev(div2, p3);
			append_dev(p3, span3);
			append_dev(span3, t15);
			append_dev(p3, t16);
			append_dev(p3, t17);
			append_dev(div2, t18);
			append_dev(div2, p4);
			append_dev(p4, span4);
			append_dev(span4, t19);
			append_dev(p4, t20);
			append_dev(p4, t21);
			append_dev(div4, t22);
			append_dev(div4, div3);
			append_dev(div3, p5);
			append_dev(p5, span5);
			append_dev(span5, t23);
			append_dev(p5, t24);
			append_dev(p5, t25);
			append_dev(div3, t26);
			append_dev(div3, p6);
			append_dev(p6, span6);
			append_dev(span6, t27);
			append_dev(p6, t28);
			append_dev(p6, t29);
			append_dev(div3, t30);
			append_dev(div3, p7);
			append_dev(p7, span7);
			append_dev(span7, t31);
			append_dev(p7, t32);
			append_dev(p7, t33);
			append_dev(div4, t34);
			if (if_block) if_block.m(div4, null);
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*flag*/ 1 && img.src !== (img_src_value = /*flag*/ ctx[0])) {
				attr_dev(img, "src", img_src_value);
			}

			if (dirty & /*name*/ 2 && img_alt_value !== (img_alt_value = "" + (/*name*/ ctx[1] + " flag"))) {
				attr_dev(img, "alt", img_alt_value);
			}

			if (dirty & /*name*/ 2) set_data_dev(t1, /*name*/ ctx[1]);
			if (dirty & /*nativeName*/ 4) set_data_dev(t5, /*nativeName*/ ctx[2]);
			if (dirty & /*population*/ 8 && t9_value !== (t9_value = numberWithCommas(/*population*/ ctx[3]) + "")) set_data_dev(t9, t9_value);
			if (dirty & /*region*/ 16) set_data_dev(t13, /*region*/ ctx[4]);
			if (dirty & /*subregion*/ 32) set_data_dev(t17, /*subregion*/ ctx[5]);
			if (dirty & /*capital*/ 64) set_data_dev(t21, /*capital*/ ctx[6]);
			if (dirty & /*topLevelDomain*/ 128) set_data_dev(t25, /*topLevelDomain*/ ctx[7]);
			if (dirty & /*displayCurrencies*/ 512 && t29_value !== (t29_value = /*displayCurrencies*/ ctx[9].join(", ") + "")) set_data_dev(t29, t29_value);
			if (dirty & /*displayLanguages*/ 1024 && t33_value !== (t33_value = /*displayLanguages*/ ctx[10].join(", ") + "")) set_data_dev(t33, t33_value);

			if (/*borders*/ ctx[8].length > 0) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					if_block.m(div4, null);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(div5);
			if (if_block) if_block.d();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function numberWithCommas(x) {
	return x.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
}

function instance($$self, $$props, $$invalidate) {
	let { flag } = $$props,
		{ name } = $$props,
		{ nativeName } = $$props,
		{ population } = $$props,
		{ region } = $$props,
		{ subregion } = $$props,
		{ capital } = $$props,
		{ topLevelDomain } = $$props,
		{ currencies } = $$props,
		{ languages } = $$props,
		{ borders } = $$props;

	let displayCurrencies = [];

	currencies.forEach(currency => {
		$$invalidate(9, displayCurrencies = [...displayCurrencies, currency.name]);
	});

	let displayLanguages = [];

	languages.forEach(language => {
		$$invalidate(10, displayLanguages = [...displayLanguages, language.name]);
	});

	const writable_props = [
		"flag",
		"name",
		"nativeName",
		"population",
		"region",
		"subregion",
		"capital",
		"topLevelDomain",
		"currencies",
		"languages",
		"borders"
	];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<CountryInfo> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("CountryInfo", $$slots, []);

	$$self.$set = $$props => {
		if ("flag" in $$props) $$invalidate(0, flag = $$props.flag);
		if ("name" in $$props) $$invalidate(1, name = $$props.name);
		if ("nativeName" in $$props) $$invalidate(2, nativeName = $$props.nativeName);
		if ("population" in $$props) $$invalidate(3, population = $$props.population);
		if ("region" in $$props) $$invalidate(4, region = $$props.region);
		if ("subregion" in $$props) $$invalidate(5, subregion = $$props.subregion);
		if ("capital" in $$props) $$invalidate(6, capital = $$props.capital);
		if ("topLevelDomain" in $$props) $$invalidate(7, topLevelDomain = $$props.topLevelDomain);
		if ("currencies" in $$props) $$invalidate(11, currencies = $$props.currencies);
		if ("languages" in $$props) $$invalidate(12, languages = $$props.languages);
		if ("borders" in $$props) $$invalidate(8, borders = $$props.borders);
	};

	$$self.$capture_state = () => ({
		fetch: browser,
		onMount,
		flag,
		name,
		nativeName,
		population,
		region,
		subregion,
		capital,
		topLevelDomain,
		currencies,
		languages,
		borders,
		numberWithCommas,
		displayCurrencies,
		displayLanguages
	});

	$$self.$inject_state = $$props => {
		if ("flag" in $$props) $$invalidate(0, flag = $$props.flag);
		if ("name" in $$props) $$invalidate(1, name = $$props.name);
		if ("nativeName" in $$props) $$invalidate(2, nativeName = $$props.nativeName);
		if ("population" in $$props) $$invalidate(3, population = $$props.population);
		if ("region" in $$props) $$invalidate(4, region = $$props.region);
		if ("subregion" in $$props) $$invalidate(5, subregion = $$props.subregion);
		if ("capital" in $$props) $$invalidate(6, capital = $$props.capital);
		if ("topLevelDomain" in $$props) $$invalidate(7, topLevelDomain = $$props.topLevelDomain);
		if ("currencies" in $$props) $$invalidate(11, currencies = $$props.currencies);
		if ("languages" in $$props) $$invalidate(12, languages = $$props.languages);
		if ("borders" in $$props) $$invalidate(8, borders = $$props.borders);
		if ("displayCurrencies" in $$props) $$invalidate(9, displayCurrencies = $$props.displayCurrencies);
		if ("displayLanguages" in $$props) $$invalidate(10, displayLanguages = $$props.displayLanguages);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [
		flag,
		name,
		nativeName,
		population,
		region,
		subregion,
		capital,
		topLevelDomain,
		borders,
		displayCurrencies,
		displayLanguages,
		currencies,
		languages
	];
}

class CountryInfo extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance, create_fragment, safe_not_equal, {
			flag: 0,
			name: 1,
			nativeName: 2,
			population: 3,
			region: 4,
			subregion: 5,
			capital: 6,
			topLevelDomain: 7,
			currencies: 11,
			languages: 12,
			borders: 8
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "CountryInfo",
			options,
			id: create_fragment.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*flag*/ ctx[0] === undefined && !("flag" in props)) {
			console.warn("<CountryInfo> was created without expected prop 'flag'");
		}

		if (/*name*/ ctx[1] === undefined && !("name" in props)) {
			console.warn("<CountryInfo> was created without expected prop 'name'");
		}

		if (/*nativeName*/ ctx[2] === undefined && !("nativeName" in props)) {
			console.warn("<CountryInfo> was created without expected prop 'nativeName'");
		}

		if (/*population*/ ctx[3] === undefined && !("population" in props)) {
			console.warn("<CountryInfo> was created without expected prop 'population'");
		}

		if (/*region*/ ctx[4] === undefined && !("region" in props)) {
			console.warn("<CountryInfo> was created without expected prop 'region'");
		}

		if (/*subregion*/ ctx[5] === undefined && !("subregion" in props)) {
			console.warn("<CountryInfo> was created without expected prop 'subregion'");
		}

		if (/*capital*/ ctx[6] === undefined && !("capital" in props)) {
			console.warn("<CountryInfo> was created without expected prop 'capital'");
		}

		if (/*topLevelDomain*/ ctx[7] === undefined && !("topLevelDomain" in props)) {
			console.warn("<CountryInfo> was created without expected prop 'topLevelDomain'");
		}

		if (/*currencies*/ ctx[11] === undefined && !("currencies" in props)) {
			console.warn("<CountryInfo> was created without expected prop 'currencies'");
		}

		if (/*languages*/ ctx[12] === undefined && !("languages" in props)) {
			console.warn("<CountryInfo> was created without expected prop 'languages'");
		}

		if (/*borders*/ ctx[8] === undefined && !("borders" in props)) {
			console.warn("<CountryInfo> was created without expected prop 'borders'");
		}
	}

	get flag() {
		throw new Error("<CountryInfo>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set flag(value) {
		throw new Error("<CountryInfo>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get name() {
		throw new Error("<CountryInfo>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set name(value) {
		throw new Error("<CountryInfo>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get nativeName() {
		throw new Error("<CountryInfo>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set nativeName(value) {
		throw new Error("<CountryInfo>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get population() {
		throw new Error("<CountryInfo>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set population(value) {
		throw new Error("<CountryInfo>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get region() {
		throw new Error("<CountryInfo>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set region(value) {
		throw new Error("<CountryInfo>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get subregion() {
		throw new Error("<CountryInfo>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set subregion(value) {
		throw new Error("<CountryInfo>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get capital() {
		throw new Error("<CountryInfo>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set capital(value) {
		throw new Error("<CountryInfo>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get topLevelDomain() {
		throw new Error("<CountryInfo>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set topLevelDomain(value) {
		throw new Error("<CountryInfo>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get currencies() {
		throw new Error("<CountryInfo>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set currencies(value) {
		throw new Error("<CountryInfo>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get languages() {
		throw new Error("<CountryInfo>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set languages(value) {
		throw new Error("<CountryInfo>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get borders() {
		throw new Error("<CountryInfo>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set borders(value) {
		throw new Error("<CountryInfo>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src\routes\[country].svelte generated by Svelte v3.23.2 */

const { console: console_1 } = globals;
const file$1 = "src\\routes\\[country].svelte";

function create_fragment$1(ctx) {
	let title_value;
	let t0;
	let a;
	let button;
	let t1;
	let t2;
	let countryinfo;
	let current;
	document.title = title_value = /*country*/ ctx[0][0].name;
	const countryinfo_spread_levels = [/*country*/ ctx[0][0]];
	let countryinfo_props = {};

	for (let i = 0; i < countryinfo_spread_levels.length; i += 1) {
		countryinfo_props = assign(countryinfo_props, countryinfo_spread_levels[i]);
	}

	countryinfo = new CountryInfo({ props: countryinfo_props, $$inline: true });

	const block = {
		c: function create() {
			t0 = space();
			a = element("a");
			button = element("button");
			t1 = text("Back");
			t2 = space();
			create_component(countryinfo.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			const head_nodes = query_selector_all("[data-svelte=\"svelte-9848jk\"]", document.head);
			head_nodes.forEach(detach_dev);
			t0 = claim_space(nodes);
			a = claim_element(nodes, "A", { href: true });
			var a_nodes = children(a);
			button = claim_element(a_nodes, "BUTTON", { type: true, class: true });
			var button_nodes = children(button);
			t1 = claim_text(button_nodes, "Back");
			button_nodes.forEach(detach_dev);
			a_nodes.forEach(detach_dev);
			t2 = claim_space(nodes);
			claim_component(countryinfo.$$.fragment, nodes);
			this.h();
		},
		h: function hydrate() {
			attr_dev(button, "type", "button");
			attr_dev(button, "class", "svelte-hgkw6m");
			add_location(button, file$1, 74, 2, 1893);
			attr_dev(a, "href", "/");
			add_location(a, file$1, 73, 0, 1877);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t0, anchor);
			insert_dev(target, a, anchor);
			append_dev(a, button);
			append_dev(button, t1);
			insert_dev(target, t2, anchor);
			mount_component(countryinfo, target, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			if ((!current || dirty & /*country*/ 1) && title_value !== (title_value = /*country*/ ctx[0][0].name)) {
				document.title = title_value;
			}

			const countryinfo_changes = (dirty & /*country*/ 1)
			? get_spread_update(countryinfo_spread_levels, [get_spread_object(/*country*/ ctx[0][0])])
			: {};

			countryinfo.$set(countryinfo_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(countryinfo.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(countryinfo.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(a);
			if (detaching) detach_dev(t2);
			destroy_component(countryinfo, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$1.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

async function preload({ params }) {
	const getCountry = await this.fetch(`https://restcountries.eu/rest/v2/name/${params.country}`);
	const country = await getCountry.json();

	if (getCountry.ok && country[0].borders.length > 0) {
		console.log("entrei");
		let bordersCodes = country[0].borders;
		let url = "https://restcountries.eu/rest/v2/alpha?codes=";

		//Define URL for bordering countries info
		bordersCodes.forEach((borderCountry, index) => {
			if (index === bordersCodes.length - 1) {
				url += borderCountry;
			} else {
				url += `${borderCountry};`;
			}
		});

		const getBorders = await this.fetch(url);
		const borders = await getBorders.json();
		let borderingCountries = [];

		borders.forEach(country => {
			borderingCountries = [...borderingCountries, country.name];
		});

		country[0].borders = borderingCountries;
		return { country };
	} else if (getCountry.ok) return { country }; else this.error(getCountry.status, err);
}

function instance$1($$self, $$props, $$invalidate) {
	let { country } = $$props;
	const writable_props = ["country"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console_1.warn(`<U5Bcountryu5D> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("U5Bcountryu5D", $$slots, []);

	$$self.$set = $$props => {
		if ("country" in $$props) $$invalidate(0, country = $$props.country);
	};

	$$self.$capture_state = () => ({ preload, CountryInfo, country });

	$$self.$inject_state = $$props => {
		if ("country" in $$props) $$invalidate(0, country = $$props.country);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [country];
}

class U5Bcountryu5D extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$1, create_fragment$1, safe_not_equal, { country: 0 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "U5Bcountryu5D",
			options,
			id: create_fragment$1.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*country*/ ctx[0] === undefined && !("country" in props)) {
			console_1.warn("<U5Bcountryu5D> was created without expected prop 'country'");
		}
	}

	get country() {
		throw new Error("<U5Bcountryu5D>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set country(value) {
		throw new Error("<U5Bcountryu5D>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export default U5Bcountryu5D;
export { preload };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
