import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, v as validate_slots, e as element, a as space, t as text, c as claim_element, b as children, f as detach_dev, g as claim_space, h as claim_text, j as attr_dev, k as add_location, l as insert_dev, m as append_dev, n as set_data_dev, o as noop, p as createEventDispatcher, q as listen_dev, r as run_all, u as handle_promise, w as query_selector_all, x as transition_in, y as transition_out, z as create_component, A as claim_component, B as mount_component, C as group_outros, D as check_outros, E as destroy_component, F as validate_each_argument, G as assign, H as get_spread_update, I as get_spread_object, J as set_style, K as empty, L as destroy_each } from './client.0600dd46.js';
import { b as browser } from './browser.100d9776.js';

/* src\components\CountryCard.svelte generated by Svelte v3.23.2 */

const file = "src\\components\\CountryCard.svelte";

function create_fragment(ctx) {
	let div1;
	let a0;
	let img;
	let img_src_value;
	let img_alt_value;
	let t0;
	let div0;
	let a1;
	let h4;
	let t1;
	let t2;
	let p0;
	let span0;
	let t3;
	let t4;
	let t5_value = numberWithCommas(/*population*/ ctx[2]) + "";
	let t5;
	let t6;
	let p1;
	let span1;
	let t7;
	let t8;
	let t9;
	let t10;
	let p2;
	let span2;
	let t11;
	let t12;
	let t13;

	const block = {
		c: function create() {
			div1 = element("div");
			a0 = element("a");
			img = element("img");
			t0 = space();
			div0 = element("div");
			a1 = element("a");
			h4 = element("h4");
			t1 = text(/*name*/ ctx[1]);
			t2 = space();
			p0 = element("p");
			span0 = element("span");
			t3 = text("Population:");
			t4 = space();
			t5 = text(t5_value);
			t6 = space();
			p1 = element("p");
			span1 = element("span");
			t7 = text("Region:");
			t8 = space();
			t9 = text(/*region*/ ctx[3]);
			t10 = space();
			p2 = element("p");
			span2 = element("span");
			t11 = text("Capital:");
			t12 = space();
			t13 = text(/*capital*/ ctx[4]);
			this.h();
		},
		l: function claim(nodes) {
			div1 = claim_element(nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			a0 = claim_element(div1_nodes, "A", { href: true, rel: true, class: true });
			var a0_nodes = children(a0);
			img = claim_element(a0_nodes, "IMG", { src: true, alt: true, class: true });
			a0_nodes.forEach(detach_dev);
			t0 = claim_space(div1_nodes);
			div0 = claim_element(div1_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			a1 = claim_element(div0_nodes, "A", { href: true, rel: true, class: true });
			var a1_nodes = children(a1);
			h4 = claim_element(a1_nodes, "H4", { class: true });
			var h4_nodes = children(h4);
			t1 = claim_text(h4_nodes, /*name*/ ctx[1]);
			h4_nodes.forEach(detach_dev);
			a1_nodes.forEach(detach_dev);
			t2 = claim_space(div0_nodes);
			p0 = claim_element(div0_nodes, "P", { class: true });
			var p0_nodes = children(p0);
			span0 = claim_element(p0_nodes, "SPAN", { class: true });
			var span0_nodes = children(span0);
			t3 = claim_text(span0_nodes, "Population:");
			span0_nodes.forEach(detach_dev);
			t4 = claim_space(p0_nodes);
			t5 = claim_text(p0_nodes, t5_value);
			p0_nodes.forEach(detach_dev);
			t6 = claim_space(div0_nodes);
			p1 = claim_element(div0_nodes, "P", { class: true });
			var p1_nodes = children(p1);
			span1 = claim_element(p1_nodes, "SPAN", { class: true });
			var span1_nodes = children(span1);
			t7 = claim_text(span1_nodes, "Region:");
			span1_nodes.forEach(detach_dev);
			t8 = claim_space(p1_nodes);
			t9 = claim_text(p1_nodes, /*region*/ ctx[3]);
			p1_nodes.forEach(detach_dev);
			t10 = claim_space(div0_nodes);
			p2 = claim_element(div0_nodes, "P", { class: true });
			var p2_nodes = children(p2);
			span2 = claim_element(p2_nodes, "SPAN", { class: true });
			var span2_nodes = children(span2);
			t11 = claim_text(span2_nodes, "Capital:");
			span2_nodes.forEach(detach_dev);
			t12 = claim_space(p2_nodes);
			t13 = claim_text(p2_nodes, /*capital*/ ctx[4]);
			p2_nodes.forEach(detach_dev);
			div0_nodes.forEach(detach_dev);
			div1_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			if (img.src !== (img_src_value = /*flag*/ ctx[0])) attr_dev(img, "src", img_src_value);
			attr_dev(img, "alt", img_alt_value = "" + (/*name*/ ctx[1] + " flag"));
			attr_dev(img, "class", "svelte-1kvku7t");
			add_location(img, file, 58, 4, 945);
			attr_dev(a0, "href", /*name*/ ctx[1]);
			attr_dev(a0, "rel", "prefetch");
			attr_dev(a0, "class", "svelte-1kvku7t");
			add_location(a0, file, 57, 2, 909);
			attr_dev(h4, "class", "svelte-1kvku7t");
			add_location(h4, file, 62, 6, 1065);
			attr_dev(a1, "href", /*name*/ ctx[1]);
			attr_dev(a1, "rel", "prefetch");
			attr_dev(a1, "class", "svelte-1kvku7t");
			add_location(a1, file, 61, 4, 1027);
			attr_dev(span0, "class", "svelte-1kvku7t");
			add_location(span0, file, 65, 6, 1107);
			attr_dev(p0, "class", "svelte-1kvku7t");
			add_location(p0, file, 64, 4, 1096);
			attr_dev(span1, "class", "svelte-1kvku7t");
			add_location(span1, file, 69, 6, 1196);
			attr_dev(p1, "class", "svelte-1kvku7t");
			add_location(p1, file, 68, 4, 1185);
			attr_dev(span2, "class", "svelte-1kvku7t");
			add_location(span2, file, 73, 6, 1259);
			attr_dev(p2, "class", "svelte-1kvku7t");
			add_location(p2, file, 72, 4, 1248);
			attr_dev(div0, "class", "container-info svelte-1kvku7t");
			add_location(div0, file, 60, 2, 993);
			attr_dev(div1, "class", "card svelte-1kvku7t");
			add_location(div1, file, 56, 0, 887);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div1, anchor);
			append_dev(div1, a0);
			append_dev(a0, img);
			append_dev(div1, t0);
			append_dev(div1, div0);
			append_dev(div0, a1);
			append_dev(a1, h4);
			append_dev(h4, t1);
			append_dev(div0, t2);
			append_dev(div0, p0);
			append_dev(p0, span0);
			append_dev(span0, t3);
			append_dev(p0, t4);
			append_dev(p0, t5);
			append_dev(div0, t6);
			append_dev(div0, p1);
			append_dev(p1, span1);
			append_dev(span1, t7);
			append_dev(p1, t8);
			append_dev(p1, t9);
			append_dev(div0, t10);
			append_dev(div0, p2);
			append_dev(p2, span2);
			append_dev(span2, t11);
			append_dev(p2, t12);
			append_dev(p2, t13);
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*flag*/ 1 && img.src !== (img_src_value = /*flag*/ ctx[0])) {
				attr_dev(img, "src", img_src_value);
			}

			if (dirty & /*name*/ 2 && img_alt_value !== (img_alt_value = "" + (/*name*/ ctx[1] + " flag"))) {
				attr_dev(img, "alt", img_alt_value);
			}

			if (dirty & /*name*/ 2) {
				attr_dev(a0, "href", /*name*/ ctx[1]);
			}

			if (dirty & /*name*/ 2) set_data_dev(t1, /*name*/ ctx[1]);

			if (dirty & /*name*/ 2) {
				attr_dev(a1, "href", /*name*/ ctx[1]);
			}

			if (dirty & /*population*/ 4 && t5_value !== (t5_value = numberWithCommas(/*population*/ ctx[2]) + "")) set_data_dev(t5, t5_value);
			if (dirty & /*region*/ 8) set_data_dev(t9, /*region*/ ctx[3]);
			if (dirty & /*capital*/ 16) set_data_dev(t13, /*capital*/ ctx[4]);
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(div1);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function numberWithCommas(x) {
	return x.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
}

function instance($$self, $$props, $$invalidate) {
	let { flag } = $$props,
		{ name } = $$props,
		{ population } = $$props,
		{ region } = $$props,
		{ capital } = $$props;

	const writable_props = ["flag", "name", "population", "region", "capital"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<CountryCard> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("CountryCard", $$slots, []);

	$$self.$set = $$props => {
		if ("flag" in $$props) $$invalidate(0, flag = $$props.flag);
		if ("name" in $$props) $$invalidate(1, name = $$props.name);
		if ("population" in $$props) $$invalidate(2, population = $$props.population);
		if ("region" in $$props) $$invalidate(3, region = $$props.region);
		if ("capital" in $$props) $$invalidate(4, capital = $$props.capital);
	};

	$$self.$capture_state = () => ({
		flag,
		name,
		population,
		region,
		capital,
		numberWithCommas
	});

	$$self.$inject_state = $$props => {
		if ("flag" in $$props) $$invalidate(0, flag = $$props.flag);
		if ("name" in $$props) $$invalidate(1, name = $$props.name);
		if ("population" in $$props) $$invalidate(2, population = $$props.population);
		if ("region" in $$props) $$invalidate(3, region = $$props.region);
		if ("capital" in $$props) $$invalidate(4, capital = $$props.capital);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [flag, name, population, region, capital];
}

class CountryCard extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance, create_fragment, safe_not_equal, {
			flag: 0,
			name: 1,
			population: 2,
			region: 3,
			capital: 4
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "CountryCard",
			options,
			id: create_fragment.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*flag*/ ctx[0] === undefined && !("flag" in props)) {
			console.warn("<CountryCard> was created without expected prop 'flag'");
		}

		if (/*name*/ ctx[1] === undefined && !("name" in props)) {
			console.warn("<CountryCard> was created without expected prop 'name'");
		}

		if (/*population*/ ctx[2] === undefined && !("population" in props)) {
			console.warn("<CountryCard> was created without expected prop 'population'");
		}

		if (/*region*/ ctx[3] === undefined && !("region" in props)) {
			console.warn("<CountryCard> was created without expected prop 'region'");
		}

		if (/*capital*/ ctx[4] === undefined && !("capital" in props)) {
			console.warn("<CountryCard> was created without expected prop 'capital'");
		}
	}

	get flag() {
		throw new Error("<CountryCard>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set flag(value) {
		throw new Error("<CountryCard>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get name() {
		throw new Error("<CountryCard>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set name(value) {
		throw new Error("<CountryCard>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get population() {
		throw new Error("<CountryCard>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set population(value) {
		throw new Error("<CountryCard>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get region() {
		throw new Error("<CountryCard>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set region(value) {
		throw new Error("<CountryCard>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get capital() {
		throw new Error("<CountryCard>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set capital(value) {
		throw new Error("<CountryCard>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src\components\SearchBar.svelte generated by Svelte v3.23.2 */
const file$1 = "src\\components\\SearchBar.svelte";

function create_fragment$1(ctx) {
	let input;
	let mounted;
	let dispose;

	const block = {
		c: function create() {
			input = element("input");
			this.h();
		},
		l: function claim(nodes) {
			input = claim_element(nodes, "INPUT", {
				type: true,
				placeholder: true,
				class: true
			});

			this.h();
		},
		h: function hydrate() {
			attr_dev(input, "type", "text");
			attr_dev(input, "placeholder", "Search for a country...");
			attr_dev(input, "class", "svelte-16n02qi");
			add_location(input, file$1, 23, 0, 476);
		},
		m: function mount(target, anchor) {
			insert_dev(target, input, anchor);

			if (!mounted) {
				dispose = [
					listen_dev(input, "keypress", /*keypress_handler*/ ctx[1], false, false, false),
					listen_dev(input, "keydown", /*keydown_handler*/ ctx[2], false, false, false),
					listen_dev(input, "keyup", /*keyup_handler*/ ctx[3], false, false, false)
				];

				mounted = true;
			}
		},
		p: noop,
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(input);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$1.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$1($$self, $$props, $$invalidate) {
	const dispatch = createEventDispatcher();
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<SearchBar> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("SearchBar", $$slots, []);

	const keypress_handler = e => {
		dispatch("valueChange", e.target.value);
	};

	const keydown_handler = e => {
		dispatch("valueChange", e.target.value);
	};

	const keyup_handler = e => {
		dispatch("valueChange", e.target.value);
	};

	$$self.$capture_state = () => ({ createEventDispatcher, dispatch });
	return [dispatch, keypress_handler, keydown_handler, keyup_handler];
}

class SearchBar extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$1, create_fragment$1, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "SearchBar",
			options,
			id: create_fragment$1.name
		});
	}
}

/* src\components\RegionPicker.svelte generated by Svelte v3.23.2 */
const file$2 = "src\\components\\RegionPicker.svelte";

function create_fragment$2(ctx) {
	let select;
	let option0;
	let t0;
	let option1;
	let t1;
	let option2;
	let t2;
	let option3;
	let t3;
	let option4;
	let t4;
	let option5;
	let t5;
	let mounted;
	let dispose;

	const block = {
		c: function create() {
			select = element("select");
			option0 = element("option");
			t0 = text("Filter By Region");
			option1 = element("option");
			t1 = text("Africa");
			option2 = element("option");
			t2 = text("America");
			option3 = element("option");
			t3 = text("Asia");
			option4 = element("option");
			t4 = text("Europe");
			option5 = element("option");
			t5 = text("Oceania");
			this.h();
		},
		l: function claim(nodes) {
			select = claim_element(nodes, "SELECT", { name: true, class: true });
			var select_nodes = children(select);
			option0 = claim_element(select_nodes, "OPTION", { value: true, selected: true });
			var option0_nodes = children(option0);
			t0 = claim_text(option0_nodes, "Filter By Region");
			option0_nodes.forEach(detach_dev);
			option1 = claim_element(select_nodes, "OPTION", { value: true });
			var option1_nodes = children(option1);
			t1 = claim_text(option1_nodes, "Africa");
			option1_nodes.forEach(detach_dev);
			option2 = claim_element(select_nodes, "OPTION", { value: true });
			var option2_nodes = children(option2);
			t2 = claim_text(option2_nodes, "America");
			option2_nodes.forEach(detach_dev);
			option3 = claim_element(select_nodes, "OPTION", { value: true });
			var option3_nodes = children(option3);
			t3 = claim_text(option3_nodes, "Asia");
			option3_nodes.forEach(detach_dev);
			option4 = claim_element(select_nodes, "OPTION", { value: true });
			var option4_nodes = children(option4);
			t4 = claim_text(option4_nodes, "Europe");
			option4_nodes.forEach(detach_dev);
			option5 = claim_element(select_nodes, "OPTION", { value: true });
			var option5_nodes = children(option5);
			t5 = claim_text(option5_nodes, "Oceania");
			option5_nodes.forEach(detach_dev);
			select_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			option0.__value = "";
			option0.value = option0.__value;
			option0.selected = true;
			add_location(option0, file$2, 29, 2, 600);
			option1.__value = "Africa";
			option1.value = option1.__value;
			add_location(option1, file$2, 30, 2, 655);
			option2.__value = "America";
			option2.value = option2.__value;
			add_location(option2, file$2, 31, 2, 697);
			option3.__value = "Asia";
			option3.value = option3.__value;
			add_location(option3, file$2, 32, 2, 741);
			option4.__value = "Europe";
			option4.value = option4.__value;
			add_location(option4, file$2, 33, 2, 779);
			option5.__value = "Oceania";
			option5.value = option5.__value;
			add_location(option5, file$2, 34, 2, 821);
			attr_dev(select, "name", "regions");
			attr_dev(select, "class", "svelte-127wbb3");
			add_location(select, file$2, 24, 0, 499);
		},
		m: function mount(target, anchor) {
			insert_dev(target, select, anchor);
			append_dev(select, option0);
			append_dev(option0, t0);
			append_dev(select, option1);
			append_dev(option1, t1);
			append_dev(select, option2);
			append_dev(option2, t2);
			append_dev(select, option3);
			append_dev(option3, t3);
			append_dev(select, option4);
			append_dev(option4, t4);
			append_dev(select, option5);
			append_dev(option5, t5);

			if (!mounted) {
				dispose = listen_dev(select, "change", /*change_handler*/ ctx[1], false, false, false);
				mounted = true;
			}
		},
		p: noop,
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(select);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$2.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$2($$self, $$props, $$invalidate) {
	const dispatch = createEventDispatcher();
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<RegionPicker> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("RegionPicker", $$slots, []);

	const change_handler = e => {
		dispatch("newRegion", e.target.value);
	};

	$$self.$capture_state = () => ({ createEventDispatcher, dispatch });
	return [dispatch, change_handler];
}

class RegionPicker extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$2, create_fragment$2, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "RegionPicker",
			options,
			id: create_fragment$2.name
		});
	}
}

/* src\routes\index.svelte generated by Svelte v3.23.2 */
const file$3 = "src\\routes\\index.svelte";

function get_each_context_1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[8] = list[i];
	return child_ctx;
}

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[8] = list[i];
	return child_ctx;
}

// (110:2) {:catch error}
function create_catch_block(ctx) {
	let p;
	let t0;
	let t1_value = /*error*/ ctx[13] + "";
	let t1;

	const block = {
		c: function create() {
			p = element("p");
			t0 = text("ERROR: ");
			t1 = text(t1_value);
			this.h();
		},
		l: function claim(nodes) {
			p = claim_element(nodes, "P", {});
			var p_nodes = children(p);
			t0 = claim_text(p_nodes, "ERROR: ");
			t1 = claim_text(p_nodes, t1_value);
			p_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(p, file$3, 110, 4, 2788);
		},
		m: function mount(target, anchor) {
			insert_dev(target, p, anchor);
			append_dev(p, t0);
			append_dev(p, t1);
		},
		p: noop,
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(p);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_catch_block.name,
		type: "catch",
		source: "(110:2) {:catch error}",
		ctx
	});

	return block;
}

// (90:2) {:then allCountries}
function create_then_block(ctx) {
	let div0;
	let searchbar;
	let t0;
	let regionpicker;
	let t1;
	let div1;
	let current_block_type_index;
	let if_block;
	let current;

	function valueChange_handler(...args) {
		return /*valueChange_handler*/ ctx[5](/*allCountries*/ ctx[7], ...args);
	}

	searchbar = new SearchBar({
			props: { searchTerm: /*searchTerm*/ ctx[0] },
			$$inline: true
		});

	searchbar.$on("valueChange", valueChange_handler);

	function newRegion_handler(...args) {
		return /*newRegion_handler*/ ctx[6](/*allCountries*/ ctx[7], ...args);
	}

	regionpicker = new RegionPicker({
			props: {
				regionToSearch: /*regionToSearch*/ ctx[2]
			},
			$$inline: true
		});

	regionpicker.$on("newRegion", newRegion_handler);
	const if_block_creators = [create_if_block, create_else_block];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*searchTerm*/ ctx[0] === undefined || /*searchTerm*/ ctx[0] === "") return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	const block = {
		c: function create() {
			div0 = element("div");
			create_component(searchbar.$$.fragment);
			t0 = space();
			create_component(regionpicker.$$.fragment);
			t1 = space();
			div1 = element("div");
			if_block.c();
			this.h();
		},
		l: function claim(nodes) {
			div0 = claim_element(nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			claim_component(searchbar.$$.fragment, div0_nodes);
			t0 = claim_space(div0_nodes);
			claim_component(regionpicker.$$.fragment, div0_nodes);
			div0_nodes.forEach(detach_dev);
			t1 = claim_space(nodes);
			div1 = claim_element(nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			if_block.l(div1_nodes);
			div1_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div0, "class", "filters");
			add_location(div0, file$3, 90, 4, 2203);
			attr_dev(div1, "class", "cards-container svelte-1rhr17z");
			add_location(div1, file$3, 98, 4, 2447);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div0, anchor);
			mount_component(searchbar, div0, null);
			append_dev(div0, t0);
			mount_component(regionpicker, div0, null);
			insert_dev(target, t1, anchor);
			insert_dev(target, div1, anchor);
			if_blocks[current_block_type_index].m(div1, null);
			current = true;
		},
		p: function update(new_ctx, dirty) {
			ctx = new_ctx;
			const searchbar_changes = {};
			if (dirty & /*searchTerm*/ 1) searchbar_changes.searchTerm = /*searchTerm*/ ctx[0];
			searchbar.$set(searchbar_changes);
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				}

				transition_in(if_block, 1);
				if_block.m(div1, null);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(searchbar.$$.fragment, local);
			transition_in(regionpicker.$$.fragment, local);
			transition_in(if_block);
			current = true;
		},
		o: function outro(local) {
			transition_out(searchbar.$$.fragment, local);
			transition_out(regionpicker.$$.fragment, local);
			transition_out(if_block);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div0);
			destroy_component(searchbar);
			destroy_component(regionpicker);
			if (detaching) detach_dev(t1);
			if (detaching) detach_dev(div1);
			if_blocks[current_block_type_index].d();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_then_block.name,
		type: "then",
		source: "(90:2) {:then allCountries}",
		ctx
	});

	return block;
}

// (104:6) {:else}
function create_else_block(ctx) {
	let each_1_anchor;
	let current;
	let each_value_1 = /*filteredCountries*/ ctx[1];
	validate_each_argument(each_value_1);
	let each_blocks = [];

	for (let i = 0; i < each_value_1.length; i += 1) {
		each_blocks[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	const block = {
		c: function create() {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
		},
		l: function claim(nodes) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(nodes);
			}

			each_1_anchor = empty();
		},
		m: function mount(target, anchor) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert_dev(target, each_1_anchor, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			if (dirty & /*filteredCountries*/ 2) {
				each_value_1 = /*filteredCountries*/ ctx[1];
				validate_each_argument(each_value_1);
				let i;

				for (i = 0; i < each_value_1.length; i += 1) {
					const child_ctx = get_each_context_1(ctx, each_value_1, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block_1(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
					}
				}

				group_outros();

				for (i = each_value_1.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();
			}
		},
		i: function intro(local) {
			if (current) return;

			for (let i = 0; i < each_value_1.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o: function outro(local) {
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d: function destroy(detaching) {
			destroy_each(each_blocks, detaching);
			if (detaching) detach_dev(each_1_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block.name,
		type: "else",
		source: "(104:6) {:else}",
		ctx
	});

	return block;
}

// (100:6) {#if searchTerm === undefined || searchTerm === ''}
function create_if_block(ctx) {
	let each_1_anchor;
	let current;
	let each_value = /*allCountries*/ ctx[7];
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	const block = {
		c: function create() {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
		},
		l: function claim(nodes) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(nodes);
			}

			each_1_anchor = empty();
		},
		m: function mount(target, anchor) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert_dev(target, each_1_anchor, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			if (dirty & /*allCountriesRequest*/ 8) {
				each_value = /*allCountries*/ ctx[7];
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
					}
				}

				group_outros();

				for (i = each_value.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();
			}
		},
		i: function intro(local) {
			if (current) return;

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o: function outro(local) {
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d: function destroy(detaching) {
			destroy_each(each_blocks, detaching);
			if (detaching) detach_dev(each_1_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(100:6) {#if searchTerm === undefined || searchTerm === ''}",
		ctx
	});

	return block;
}

// (105:8) {#each filteredCountries as country}
function create_each_block_1(ctx) {
	let countrycard;
	let current;
	const countrycard_spread_levels = [/*country*/ ctx[8]];
	let countrycard_props = {};

	for (let i = 0; i < countrycard_spread_levels.length; i += 1) {
		countrycard_props = assign(countrycard_props, countrycard_spread_levels[i]);
	}

	countrycard = new CountryCard({ props: countrycard_props, $$inline: true });

	const block = {
		c: function create() {
			create_component(countrycard.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(countrycard.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(countrycard, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const countrycard_changes = (dirty & /*filteredCountries*/ 2)
			? get_spread_update(countrycard_spread_levels, [get_spread_object(/*country*/ ctx[8])])
			: {};

			countrycard.$set(countrycard_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(countrycard.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(countrycard.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(countrycard, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block_1.name,
		type: "each",
		source: "(105:8) {#each filteredCountries as country}",
		ctx
	});

	return block;
}

// (101:8) {#each allCountries as country}
function create_each_block(ctx) {
	let countrycard;
	let current;
	const countrycard_spread_levels = [/*country*/ ctx[8]];
	let countrycard_props = {};

	for (let i = 0; i < countrycard_spread_levels.length; i += 1) {
		countrycard_props = assign(countrycard_props, countrycard_spread_levels[i]);
	}

	countrycard = new CountryCard({ props: countrycard_props, $$inline: true });

	const block = {
		c: function create() {
			create_component(countrycard.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(countrycard.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(countrycard, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const countrycard_changes = (dirty & /*allCountriesRequest*/ 8)
			? get_spread_update(countrycard_spread_levels, [get_spread_object(/*country*/ ctx[8])])
			: {};

			countrycard.$set(countrycard_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(countrycard.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(countrycard.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(countrycard, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block.name,
		type: "each",
		source: "(101:8) {#each allCountries as country}",
		ctx
	});

	return block;
}

// (80:30)      <div class="loading">       <div class="css-158afzf">         <div class="css-1qhvhel" />         <div class="css-1qhvhel" style="animation-delay: -1.1s;" />         <div class="css-1qhvhel" style="animation-delay: -1s;" />         <div class="css-1qhvhel" style="animation-delay: -0.9s;" />         <div class="css-1qhvhel" style="animation-delay: -0.8s;" />       </div>     </div>   {:then allCountries}
function create_pending_block(ctx) {
	let div6;
	let div5;
	let div0;
	let t0;
	let div1;
	let t1;
	let div2;
	let t2;
	let div3;
	let t3;
	let div4;

	const block = {
		c: function create() {
			div6 = element("div");
			div5 = element("div");
			div0 = element("div");
			t0 = space();
			div1 = element("div");
			t1 = space();
			div2 = element("div");
			t2 = space();
			div3 = element("div");
			t3 = space();
			div4 = element("div");
			this.h();
		},
		l: function claim(nodes) {
			div6 = claim_element(nodes, "DIV", { class: true });
			var div6_nodes = children(div6);
			div5 = claim_element(div6_nodes, "DIV", { class: true });
			var div5_nodes = children(div5);
			div0 = claim_element(div5_nodes, "DIV", { class: true });
			children(div0).forEach(detach_dev);
			t0 = claim_space(div5_nodes);
			div1 = claim_element(div5_nodes, "DIV", { class: true, style: true });
			children(div1).forEach(detach_dev);
			t1 = claim_space(div5_nodes);
			div2 = claim_element(div5_nodes, "DIV", { class: true, style: true });
			children(div2).forEach(detach_dev);
			t2 = claim_space(div5_nodes);
			div3 = claim_element(div5_nodes, "DIV", { class: true, style: true });
			children(div3).forEach(detach_dev);
			t3 = claim_space(div5_nodes);
			div4 = claim_element(div5_nodes, "DIV", { class: true, style: true });
			children(div4).forEach(detach_dev);
			div5_nodes.forEach(detach_dev);
			div6_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div0, "class", "css-1qhvhel svelte-1rhr17z");
			add_location(div0, file$3, 82, 8, 1854);
			attr_dev(div1, "class", "css-1qhvhel svelte-1rhr17z");
			set_style(div1, "animation-delay", "-1.1s");
			add_location(div1, file$3, 83, 8, 1890);
			attr_dev(div2, "class", "css-1qhvhel svelte-1rhr17z");
			set_style(div2, "animation-delay", "-1s");
			add_location(div2, file$3, 84, 8, 1958);
			attr_dev(div3, "class", "css-1qhvhel svelte-1rhr17z");
			set_style(div3, "animation-delay", "-0.9s");
			add_location(div3, file$3, 85, 8, 2024);
			attr_dev(div4, "class", "css-1qhvhel svelte-1rhr17z");
			set_style(div4, "animation-delay", "-0.8s");
			add_location(div4, file$3, 86, 8, 2092);
			attr_dev(div5, "class", "css-158afzf svelte-1rhr17z");
			add_location(div5, file$3, 81, 6, 1820);
			attr_dev(div6, "class", "loading svelte-1rhr17z");
			add_location(div6, file$3, 80, 4, 1792);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div6, anchor);
			append_dev(div6, div5);
			append_dev(div5, div0);
			append_dev(div5, t0);
			append_dev(div5, div1);
			append_dev(div5, t1);
			append_dev(div5, div2);
			append_dev(div5, t2);
			append_dev(div5, div3);
			append_dev(div5, t3);
			append_dev(div5, div4);
		},
		p: noop,
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(div6);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_pending_block.name,
		type: "pending",
		source: "(80:30)      <div class=\\\"loading\\\">       <div class=\\\"css-158afzf\\\">         <div class=\\\"css-1qhvhel\\\" />         <div class=\\\"css-1qhvhel\\\" style=\\\"animation-delay: -1.1s;\\\" />         <div class=\\\"css-1qhvhel\\\" style=\\\"animation-delay: -1s;\\\" />         <div class=\\\"css-1qhvhel\\\" style=\\\"animation-delay: -0.9s;\\\" />         <div class=\\\"css-1qhvhel\\\" style=\\\"animation-delay: -0.8s;\\\" />       </div>     </div>   {:then allCountries}",
		ctx
	});

	return block;
}

function create_fragment$3(ctx) {
	let t;
	let div;
	let promise;
	let current;

	let info = {
		ctx,
		current: null,
		token: null,
		pending: create_pending_block,
		then: create_then_block,
		catch: create_catch_block,
		value: 7,
		error: 13,
		blocks: [,,,]
	};

	handle_promise(promise = /*allCountriesRequest*/ ctx[3], info);

	const block = {
		c: function create() {
			t = space();
			div = element("div");
			info.block.c();
			this.h();
		},
		l: function claim(nodes) {
			const head_nodes = query_selector_all("[data-svelte=\"svelte-1bx823c\"]", document.head);
			head_nodes.forEach(detach_dev);
			t = claim_space(nodes);
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			info.block.l(div_nodes);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			document.title = "All Around The World";
			attr_dev(div, "class", "outer-container svelte-1rhr17z");
			add_location(div, file$3, 78, 0, 1727);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
			insert_dev(target, div, anchor);
			info.block.m(div, info.anchor = null);
			info.mount = () => div;
			info.anchor = null;
			current = true;
		},
		p: function update(new_ctx, [dirty]) {
			ctx = new_ctx;

			{
				const child_ctx = ctx.slice();
				child_ctx[7] = info.resolved;
				info.block.p(child_ctx, dirty);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(info.block);
			current = true;
		},
		o: function outro(local) {
			for (let i = 0; i < 3; i += 1) {
				const block = info.blocks[i];
				transition_out(block);
			}

			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
			if (detaching) detach_dev(div);
			info.block.d();
			info.token = null;
			info = null;
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$3.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function findMatches(termToMatch, countries) {
	let regex = new RegExp(termToMatch, "gi");

	return countries.filter(country => {
		return country.name.match(regex) || country.region.match(regex);
	});
}

function instance$3($$self, $$props, $$invalidate) {
	let searchTerm;
	let filteredCountries;
	let regionToSearch;

	const allCountriesRequest = (async () => {
		const response = await browser("https://restcountries.eu/rest/v2/all");
		return await response.json();
	})();

	function handleSearch(e, countries) {
		$$invalidate(0, searchTerm = e.detail);
		$$invalidate(1, filteredCountries = findMatches(searchTerm, countries));
	}

	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Routes> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("Routes", $$slots, []);
	const valueChange_handler = (allCountries, e) => handleSearch(e, allCountries);
	const newRegion_handler = (allCountries, e) => handleSearch(e, allCountries);

	$$self.$capture_state = () => ({
		fetch: browser,
		CountryCard,
		SearchBar,
		RegionPicker,
		searchTerm,
		filteredCountries,
		regionToSearch,
		allCountriesRequest,
		findMatches,
		handleSearch
	});

	$$self.$inject_state = $$props => {
		if ("searchTerm" in $$props) $$invalidate(0, searchTerm = $$props.searchTerm);
		if ("filteredCountries" in $$props) $$invalidate(1, filteredCountries = $$props.filteredCountries);
		if ("regionToSearch" in $$props) $$invalidate(2, regionToSearch = $$props.regionToSearch);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [
		searchTerm,
		filteredCountries,
		regionToSearch,
		allCountriesRequest,
		handleSearch,
		valueChange_handler,
		newRegion_handler
	];
}

class Routes extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$3, create_fragment$3, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Routes",
			options,
			id: create_fragment$3.name
		});
	}
}

export default Routes;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
